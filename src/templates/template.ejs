<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/css/styles.css">\
    <style>
        /* Basic styling for the chatbot container and button */
        #chatbot-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-family: Arial, sans-serif;
        }

        #chatbot-button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            font-weight: bold;
        }

        /* Styling for the chatbot popup */
        #chatbot-popup {
            display: none;
            position: absolute;
            bottom: 0;
            right: 0;
            max-width: 300px;
            background-color: #fff;
            border: 1px solid #ddd;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
        }

        /* Styling for the chat box */
        #chat-box {
            max-height: 300px;
            overflow-y: auto;
            padding: 10px;
        }

        /* Styling for chat messages */
        .user-message {
            background-color: #f0f0f0;
            padding: 5px;
            border-radius: 5px;
            margin-bottom: 10px;
        }

        .bot-message {
            background-color: #007bff;
            color: #fff;
            padding: 5px;
            border-radius: 5px;
            margin-bottom: 10px;
        }

        /* Styling for user input and send button */
        #input-and-button {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-top: 1px solid #ddd;
        }

        #user-input {
            width: 100%;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        #send-button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 5px;
        }

        #send-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        /* Styling for error message */
        .error-message {
            color: red;
            padding: 5px;
        }
    </style>
    <title>Chatbot</title>
</head>

<body>
    <div id="chatbot-container">
        <button id="chatbot-button">Chat</button>
        <div id="chatbot-popup">
            <div id="chat-box">
                <!-- Chat messages will be inserted here using EJS -->
            </div>
            <div id="input-and-button">
                <textarea id="user-input" placeholder="Type your message..." rows="4"></textarea>
                <button id="send-button" disabled>Send</button>
            </div>
            <div id="error-message" class="error-message"></div>
        </div>
    </div>
    <script>
        import ejs from 'ejs';

        document.addEventListener("DOMContentLoaded", function () {
            console.log
            const chatbotButton = document.getElementById("chatbot-button");
            const chatWindow = document.getElementById("chatbot-popup");
            const chatBox = document.getElementById("chat-box");
            const userInput = document.getElementById("user-input");
            const sendButton = document.getElementById("send-button");
            const errorMessage = document.getElementById("error-message");

            // Function to render an EJS template with dynamic data
            function renderTemplate(templateName, data) {
                const template = require(`./templates/${templateName}.ejs`);
                return ejs.render(template, data);
            }

            // Function to add a message to the chat box
            function addMessage(sender, messageText, messageClass) {
                const data = {
                    messageText,
                    messageClass,
                };

                const messageHTML = renderTemplate("message", data);
                chatBox.innerHTML += messageHTML;
            }

            // Toggle chat window visibility when the chatbot button is clicked
            chatbotButton.addEventListener("click", function () {
                if (chatWindow.style.display === "none" || chatWindow.style.display === "") {
                    chatWindow.style.display = "block";
                } else {
                    chatWindow.style.display = "none";
                }
            });

            // Send user message to the chat
            function sendMessage() {
                const userMessage = userInput.value.trim();

                if (userMessage !== "") {
                    addMessage("You", userMessage, "user-message");

                    // Display the loader
                    addMessage("ChatBot", "Loading...", "bot-message");

                    // Simulate an API response after a delay (replace with actual API call)
                    setTimeout(() => {
                        const botResponse = "This is a sample response from the chatbot.";
                        addMessage("ChatBot", botResponse, "bot-message");
                    }, 1000);

                    userInput.value = "";
                    sendButton.disabled = true;
                    errorMessage.textContent = "";
                }
            }

            // Event listener for sending a message when the send button is clicked
            sendButton.addEventListener("click", function () {
                sendMessage();
            });

            // Event listener for handling user input
            userInput.addEventListener("input", function () {
                const userMessage = userInput.value.trim();

                if (userMessage === "") {
                    sendButton.disabled = true;
                    errorMessage.textContent = "Message cannot be empty.";
                } else if (/^\s+$/.test(userMessage)) {
                    sendButton.disabled = true;
                    errorMessage.textContent = "Message cannot contain only whitespace.";
                } else {
                    sendButton.disabled = false;
                    errorMessage.textContent = "";
                }
            });

            // Event listener for handling user input using the Enter key
            userInput.addEventListener("keydown", function (event) {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault(); // Prevent the default form submission
                    sendMessage(); // Call sendMessage function when Enter is pressed
                }
            });
        });
    </script>
</body>

</html>